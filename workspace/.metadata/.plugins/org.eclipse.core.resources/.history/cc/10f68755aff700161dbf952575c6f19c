package work.workproject_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.DataQuality;
import routines.Relational;
import routines.DataQualityDependencies;
import routines.Mathematical;
import routines.SQLike;
import routines.Numeric;
import routines.TalendString;
import routines.DQTechnical;
import routines.StringHandling;
import routines.DataMasking;
import routines.TalendDate;
import routines.DqStringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: WorkProject Purpose: <br>
 * Description:  <br>
 * @author SMailavaram@newgistics.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class WorkProject implements TalendJob {
	static {
		System.setProperty("TalendJob.log", "WorkProject.log");
	}
	private static org.apache.log4j.Logger log = org.apache.log4j.Logger
			.getLogger(WorkProject.class);

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "WorkProject";
	private final String projectName = "WORK";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					WorkProject.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(WorkProject.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tMSSqlConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage());
			}

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tMSSqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMSSqlConnection_1 begin ] start
				 */

				ok_Hash.put("tMSSqlConnection_1", false);
				start_Hash
						.put("tMSSqlConnection_1", System.currentTimeMillis());

				currentComponent = "tMSSqlConnection_1";

				int tos_count_tMSSqlConnection_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tMSSqlConnection_1 - " + "Start to work.");
				StringBuilder log4jParamters_tMSSqlConnection_1 = new StringBuilder();
				log4jParamters_tMSSqlConnection_1.append("Parameters:");
				log4jParamters_tMSSqlConnection_1.append("HOST" + " = "
						+ "\"devdb4\"");
				log4jParamters_tMSSqlConnection_1.append(" | ");
				log4jParamters_tMSSqlConnection_1.append("PORT" + " = "
						+ "\"1433\"");
				log4jParamters_tMSSqlConnection_1.append(" | ");
				log4jParamters_tMSSqlConnection_1.append("SCHEMA_DB" + " = "
						+ "\"\"");
				log4jParamters_tMSSqlConnection_1.append(" | ");
				log4jParamters_tMSSqlConnection_1.append("DBNAME" + " = "
						+ "\"ngsdw\"");
				log4jParamters_tMSSqlConnection_1.append(" | ");
				log4jParamters_tMSSqlConnection_1.append("USER" + " = "
						+ "\"etlprocess\"");
				log4jParamters_tMSSqlConnection_1.append(" | ");
				log4jParamters_tMSSqlConnection_1.append("PASS"
						+ " = "
						+ String.valueOf("ce36646cd05a3d2ab533f79cbfad2331")
								.substring(0, 4) + "...");
				log4jParamters_tMSSqlConnection_1.append(" | ");
				log4jParamters_tMSSqlConnection_1.append("PROPERTIES" + " = "
						+ "\"\"");
				log4jParamters_tMSSqlConnection_1.append(" | ");
				log4jParamters_tMSSqlConnection_1
						.append("USE_SHARED_CONNECTION" + " = " + "false");
				log4jParamters_tMSSqlConnection_1.append(" | ");
				log4jParamters_tMSSqlConnection_1
						.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
				log4jParamters_tMSSqlConnection_1.append(" | ");
				log4jParamters_tMSSqlConnection_1.append("AUTO_COMMIT" + " = "
						+ "false");
				log4jParamters_tMSSqlConnection_1.append(" | ");
				log4jParamters_tMSSqlConnection_1
						.append("SHARE_IDENTITY_SETTING" + " = " + "false");
				log4jParamters_tMSSqlConnection_1.append(" | ");
				if (log.isDebugEnabled())
					log.debug("tMSSqlConnection_1 - "
							+ log4jParamters_tMSSqlConnection_1);

				String url_tMSSqlConnection_1 = "jdbc:jtds:sqlserver://"
						+ "devdb4";
				String port_tMSSqlConnection_1 = "1433";
				String dbname_tMSSqlConnection_1 = "ngsdw";
				if (!"".equals(port_tMSSqlConnection_1)) {
					url_tMSSqlConnection_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tMSSqlConnection_1)) {
					url_tMSSqlConnection_1 += "//" + "ngsdw";
				}
				url_tMSSqlConnection_1 += ";appName=" + projectName + ";" + "";

				String dbUser_tMSSqlConnection_1 = "etlprocess";

				final String decryptedPassword_tMSSqlConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ce36646cd05a3d2ab533f79cbfad2331");
				String dbPwd_tMSSqlConnection_1 = decryptedPassword_tMSSqlConnection_1;

				java.sql.Connection conn_tMSSqlConnection_1 = null;

				String driverClass_tMSSqlConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class.forName(driverClass_tMSSqlConnection_1);

				log.debug("tMSSqlConnection_1 - Driver ClassName: "
						+ driverClass_tMSSqlConnection_1 + ".");

				log.debug("tMSSqlConnection_1 - Connection attempt to '"
						+ url_tMSSqlConnection_1 + "' with the username '"
						+ dbUser_tMSSqlConnection_1 + "'.");

				conn_tMSSqlConnection_1 = java.sql.DriverManager.getConnection(
						url_tMSSqlConnection_1, dbUser_tMSSqlConnection_1,
						dbPwd_tMSSqlConnection_1);
				log.debug("tMSSqlConnection_1 - Connection to '"
						+ url_tMSSqlConnection_1 + "' has succeeded.");

				globalMap.put("conn_tMSSqlConnection_1",
						conn_tMSSqlConnection_1);
				if (null != conn_tMSSqlConnection_1) {

					log.debug("tMSSqlConnection_1 - Connection is set auto commit to 'false'.");
					conn_tMSSqlConnection_1.setAutoCommit(false);
				}

				globalMap.put("dbschema_tMSSqlConnection_1", "");

				globalMap.put("db_tMSSqlConnection_1", "ngsdw");

				globalMap.put("conn_tMSSqlConnection_1",
						conn_tMSSqlConnection_1);

				globalMap.put("shareIdentitySetting_tMSSqlConnection_1", false);

				/**
				 * [tMSSqlConnection_1 begin ] stop
				 */

				/**
				 * [tMSSqlConnection_1 main ] start
				 */

				currentComponent = "tMSSqlConnection_1";

				tos_count_tMSSqlConnection_1++;

				/**
				 * [tMSSqlConnection_1 main ] stop
				 */

				/**
				 * [tMSSqlConnection_1 end ] start
				 */

				currentComponent = "tMSSqlConnection_1";

				if (log.isDebugEnabled())
					log.debug("tMSSqlConnection_1 - " + "Done.");

				ok_Hash.put("tMSSqlConnection_1", true);
				end_Hash.put("tMSSqlConnection_1", System.currentTimeMillis());

				/**
				 * [tMSSqlConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage());
			}

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlConnection_1 finally ] start
				 */

				currentComponent = "tMSSqlConnection_1";

				/**
				 * [tMSSqlConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_WORK_WorkProject = new byte[0];
		static byte[] commonByteArray_WORK_WorkProject = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int DateKey;

		public int getDateKey() {
			return this.DateKey;
		}

		public java.util.Date DayDate;

		public java.util.Date getDayDate() {
			return this.DayDate;
		}

		public String DateDescription;

		public String getDateDescription() {
			return this.DateDescription;
		}

		public String DateUSA;

		public String getDateUSA() {
			return this.DateUSA;
		}

		public String DayOfWeek;

		public String getDayOfWeek() {
			return this.DayOfWeek;
		}

		public String MonthName;

		public String getMonthName() {
			return this.MonthName;
		}

		public int DayNumInWeek;

		public int getDayNumInWeek() {
			return this.DayNumInWeek;
		}

		public int DayNumInMonth;

		public int getDayNumInMonth() {
			return this.DayNumInMonth;
		}

		public int DayNumInYear;

		public int getDayNumInYear() {
			return this.DayNumInYear;
		}

		public int MonthNumInYear;

		public int getMonthNumInYear() {
			return this.MonthNumInYear;
		}

		public int WeekNumInYear;

		public int getWeekNumInYear() {
			return this.WeekNumInYear;
		}

		public int CalYear;

		public int getCalYear() {
			return this.CalYear;
		}

		public String CalYearMonth;

		public String getCalYearMonth() {
			return this.CalYearMonth;
		}

		public java.util.Date MonthBeginDate;

		public java.util.Date getMonthBeginDate() {
			return this.MonthBeginDate;
		}

		public java.util.Date WeekBeginDate;

		public java.util.Date getWeekBeginDate() {
			return this.WeekBeginDate;
		}

		public java.util.Date WeekEndDate;

		public java.util.Date getWeekEndDate() {
			return this.WeekEndDate;
		}

		public String BusinessDayFlag;

		public String getBusinessDayFlag() {
			return this.BusinessDayFlag;
		}

		public Integer FiscalWeek;

		public Integer getFiscalWeek() {
			return this.FiscalWeek;
		}

		public Integer FiscalMonth;

		public Integer getFiscalMonth() {
			return this.FiscalMonth;
		}

		public Integer FiscalQuarter;

		public Integer getFiscalQuarter() {
			return this.FiscalQuarter;
		}

		public Integer FiscalYear;

		public Integer getFiscalYear() {
			return this.FiscalYear;
		}

		public String FirstDayInMonthFlag;

		public String getFirstDayInMonthFlag() {
			return this.FirstDayInMonthFlag;
		}

		public String LastDayInMonthFlag;

		public String getLastDayInMonthFlag() {
			return this.LastDayInMonthFlag;
		}

		public String FirstDayFiscalMonthFlag;

		public String getFirstDayFiscalMonthFlag() {
			return this.FirstDayFiscalMonthFlag;
		}

		public Integer WeekSeqNum;

		public Integer getWeekSeqNum() {
			return this.WeekSeqNum;
		}

		public String FiscalMonthName;

		public String getFiscalMonthName() {
			return this.FiscalMonthName;
		}

		public String FiscalYearMonth;

		public String getFiscalYearMonth() {
			return this.FiscalYearMonth;
		}

		public String PostalDayFlag;

		public String getPostalDayFlag() {
			return this.PostalDayFlag;
		}

		public String CalQuarter;

		public String getCalQuarter() {
			return this.CalQuarter;
		}

		public Short CalWeek;

		public Short getCalWeek() {
			return this.CalWeek;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.DateKey;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.DateKey != other.DateKey)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.DateKey = this.DateKey;
			other.DayDate = this.DayDate;
			other.DateDescription = this.DateDescription;
			other.DateUSA = this.DateUSA;
			other.DayOfWeek = this.DayOfWeek;
			other.MonthName = this.MonthName;
			other.DayNumInWeek = this.DayNumInWeek;
			other.DayNumInMonth = this.DayNumInMonth;
			other.DayNumInYear = this.DayNumInYear;
			other.MonthNumInYear = this.MonthNumInYear;
			other.WeekNumInYear = this.WeekNumInYear;
			other.CalYear = this.CalYear;
			other.CalYearMonth = this.CalYearMonth;
			other.MonthBeginDate = this.MonthBeginDate;
			other.WeekBeginDate = this.WeekBeginDate;
			other.WeekEndDate = this.WeekEndDate;
			other.BusinessDayFlag = this.BusinessDayFlag;
			other.FiscalWeek = this.FiscalWeek;
			other.FiscalMonth = this.FiscalMonth;
			other.FiscalQuarter = this.FiscalQuarter;
			other.FiscalYear = this.FiscalYear;
			other.FirstDayInMonthFlag = this.FirstDayInMonthFlag;
			other.LastDayInMonthFlag = this.LastDayInMonthFlag;
			other.FirstDayFiscalMonthFlag = this.FirstDayFiscalMonthFlag;
			other.WeekSeqNum = this.WeekSeqNum;
			other.FiscalMonthName = this.FiscalMonthName;
			other.FiscalYearMonth = this.FiscalYearMonth;
			other.PostalDayFlag = this.PostalDayFlag;
			other.CalQuarter = this.CalQuarter;
			other.CalWeek = this.CalWeek;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.DateKey = this.DateKey;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WORK_WorkProject.length) {
					if (length < 1024
							&& commonByteArray_WORK_WorkProject.length == 0) {
						commonByteArray_WORK_WorkProject = new byte[1024];
					} else {
						commonByteArray_WORK_WorkProject = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WORK_WorkProject, 0, length);
				strReturn = new String(commonByteArray_WORK_WorkProject, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WORK_WorkProject) {

				try {

					int length = 0;

					this.DateKey = dis.readInt();

					this.DayDate = readDate(dis);

					this.DateDescription = readString(dis);

					this.DateUSA = readString(dis);

					this.DayOfWeek = readString(dis);

					this.MonthName = readString(dis);

					this.DayNumInWeek = dis.readInt();

					this.DayNumInMonth = dis.readInt();

					this.DayNumInYear = dis.readInt();

					this.MonthNumInYear = dis.readInt();

					this.WeekNumInYear = dis.readInt();

					this.CalYear = dis.readInt();

					this.CalYearMonth = readString(dis);

					this.MonthBeginDate = readDate(dis);

					this.WeekBeginDate = readDate(dis);

					this.WeekEndDate = readDate(dis);

					this.BusinessDayFlag = readString(dis);

					this.FiscalWeek = readInteger(dis);

					this.FiscalMonth = readInteger(dis);

					this.FiscalQuarter = readInteger(dis);

					this.FiscalYear = readInteger(dis);

					this.FirstDayInMonthFlag = readString(dis);

					this.LastDayInMonthFlag = readString(dis);

					this.FirstDayFiscalMonthFlag = readString(dis);

					this.WeekSeqNum = readInteger(dis);

					this.FiscalMonthName = readString(dis);

					this.FiscalYearMonth = readString(dis);

					this.PostalDayFlag = readString(dis);

					this.CalQuarter = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CalWeek = null;
					} else {
						this.CalWeek = dis.readShort();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.DateKey);

				// java.util.Date

				writeDate(this.DayDate, dos);

				// String

				writeString(this.DateDescription, dos);

				// String

				writeString(this.DateUSA, dos);

				// String

				writeString(this.DayOfWeek, dos);

				// String

				writeString(this.MonthName, dos);

				// int

				dos.writeInt(this.DayNumInWeek);

				// int

				dos.writeInt(this.DayNumInMonth);

				// int

				dos.writeInt(this.DayNumInYear);

				// int

				dos.writeInt(this.MonthNumInYear);

				// int

				dos.writeInt(this.WeekNumInYear);

				// int

				dos.writeInt(this.CalYear);

				// String

				writeString(this.CalYearMonth, dos);

				// java.util.Date

				writeDate(this.MonthBeginDate, dos);

				// java.util.Date

				writeDate(this.WeekBeginDate, dos);

				// java.util.Date

				writeDate(this.WeekEndDate, dos);

				// String

				writeString(this.BusinessDayFlag, dos);

				// Integer

				writeInteger(this.FiscalWeek, dos);

				// Integer

				writeInteger(this.FiscalMonth, dos);

				// Integer

				writeInteger(this.FiscalQuarter, dos);

				// Integer

				writeInteger(this.FiscalYear, dos);

				// String

				writeString(this.FirstDayInMonthFlag, dos);

				// String

				writeString(this.LastDayInMonthFlag, dos);

				// String

				writeString(this.FirstDayFiscalMonthFlag, dos);

				// Integer

				writeInteger(this.WeekSeqNum, dos);

				// String

				writeString(this.FiscalMonthName, dos);

				// String

				writeString(this.FiscalYearMonth, dos);

				// String

				writeString(this.PostalDayFlag, dos);

				// String

				writeString(this.CalQuarter, dos);

				// Short

				if (this.CalWeek == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.CalWeek);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DateKey=" + String.valueOf(DateKey));
			sb.append(",DayDate=" + String.valueOf(DayDate));
			sb.append(",DateDescription=" + DateDescription);
			sb.append(",DateUSA=" + DateUSA);
			sb.append(",DayOfWeek=" + DayOfWeek);
			sb.append(",MonthName=" + MonthName);
			sb.append(",DayNumInWeek=" + String.valueOf(DayNumInWeek));
			sb.append(",DayNumInMonth=" + String.valueOf(DayNumInMonth));
			sb.append(",DayNumInYear=" + String.valueOf(DayNumInYear));
			sb.append(",MonthNumInYear=" + String.valueOf(MonthNumInYear));
			sb.append(",WeekNumInYear=" + String.valueOf(WeekNumInYear));
			sb.append(",CalYear=" + String.valueOf(CalYear));
			sb.append(",CalYearMonth=" + CalYearMonth);
			sb.append(",MonthBeginDate=" + String.valueOf(MonthBeginDate));
			sb.append(",WeekBeginDate=" + String.valueOf(WeekBeginDate));
			sb.append(",WeekEndDate=" + String.valueOf(WeekEndDate));
			sb.append(",BusinessDayFlag=" + BusinessDayFlag);
			sb.append(",FiscalWeek=" + String.valueOf(FiscalWeek));
			sb.append(",FiscalMonth=" + String.valueOf(FiscalMonth));
			sb.append(",FiscalQuarter=" + String.valueOf(FiscalQuarter));
			sb.append(",FiscalYear=" + String.valueOf(FiscalYear));
			sb.append(",FirstDayInMonthFlag=" + FirstDayInMonthFlag);
			sb.append(",LastDayInMonthFlag=" + LastDayInMonthFlag);
			sb.append(",FirstDayFiscalMonthFlag=" + FirstDayFiscalMonthFlag);
			sb.append(",WeekSeqNum=" + String.valueOf(WeekSeqNum));
			sb.append(",FiscalMonthName=" + FiscalMonthName);
			sb.append(",FiscalYearMonth=" + FiscalYearMonth);
			sb.append(",PostalDayFlag=" + PostalDayFlag);
			sb.append(",CalQuarter=" + CalQuarter);
			sb.append(",CalWeek=" + String.valueOf(CalWeek));
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			sb.append(DateKey);

			sb.append("|");

			if (DayDate == null) {
				sb.append("<null>");
			} else {
				sb.append(DayDate);
			}

			sb.append("|");

			if (DateDescription == null) {
				sb.append("<null>");
			} else {
				sb.append(DateDescription);
			}

			sb.append("|");

			if (DateUSA == null) {
				sb.append("<null>");
			} else {
				sb.append(DateUSA);
			}

			sb.append("|");

			if (DayOfWeek == null) {
				sb.append("<null>");
			} else {
				sb.append(DayOfWeek);
			}

			sb.append("|");

			if (MonthName == null) {
				sb.append("<null>");
			} else {
				sb.append(MonthName);
			}

			sb.append("|");

			sb.append(DayNumInWeek);

			sb.append("|");

			sb.append(DayNumInMonth);

			sb.append("|");

			sb.append(DayNumInYear);

			sb.append("|");

			sb.append(MonthNumInYear);

			sb.append("|");

			sb.append(WeekNumInYear);

			sb.append("|");

			sb.append(CalYear);

			sb.append("|");

			if (CalYearMonth == null) {
				sb.append("<null>");
			} else {
				sb.append(CalYearMonth);
			}

			sb.append("|");

			if (MonthBeginDate == null) {
				sb.append("<null>");
			} else {
				sb.append(MonthBeginDate);
			}

			sb.append("|");

			if (WeekBeginDate == null) {
				sb.append("<null>");
			} else {
				sb.append(WeekBeginDate);
			}

			sb.append("|");

			if (WeekEndDate == null) {
				sb.append("<null>");
			} else {
				sb.append(WeekEndDate);
			}

			sb.append("|");

			if (BusinessDayFlag == null) {
				sb.append("<null>");
			} else {
				sb.append(BusinessDayFlag);
			}

			sb.append("|");

			if (FiscalWeek == null) {
				sb.append("<null>");
			} else {
				sb.append(FiscalWeek);
			}

			sb.append("|");

			if (FiscalMonth == null) {
				sb.append("<null>");
			} else {
				sb.append(FiscalMonth);
			}

			sb.append("|");

			if (FiscalQuarter == null) {
				sb.append("<null>");
			} else {
				sb.append(FiscalQuarter);
			}

			sb.append("|");

			if (FiscalYear == null) {
				sb.append("<null>");
			} else {
				sb.append(FiscalYear);
			}

			sb.append("|");

			if (FirstDayInMonthFlag == null) {
				sb.append("<null>");
			} else {
				sb.append(FirstDayInMonthFlag);
			}

			sb.append("|");

			if (LastDayInMonthFlag == null) {
				sb.append("<null>");
			} else {
				sb.append(LastDayInMonthFlag);
			}

			sb.append("|");

			if (FirstDayFiscalMonthFlag == null) {
				sb.append("<null>");
			} else {
				sb.append(FirstDayFiscalMonthFlag);
			}

			sb.append("|");

			if (WeekSeqNum == null) {
				sb.append("<null>");
			} else {
				sb.append(WeekSeqNum);
			}

			sb.append("|");

			if (FiscalMonthName == null) {
				sb.append("<null>");
			} else {
				sb.append(FiscalMonthName);
			}

			sb.append("|");

			if (FiscalYearMonth == null) {
				sb.append("<null>");
			} else {
				sb.append(FiscalYearMonth);
			}

			sb.append("|");

			if (PostalDayFlag == null) {
				sb.append("<null>");
			} else {
				sb.append(PostalDayFlag);
			}

			sb.append("|");

			if (CalQuarter == null) {
				sb.append("<null>");
			} else {
				sb.append(CalQuarter);
			}

			sb.append("|");

			if (CalWeek == null) {
				sb.append("<null>");
			} else {
				sb.append(CalWeek);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DateKey, other.DateKey);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMSSqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tLogRow_1 - " + "Start to work.");
				StringBuilder log4jParamters_tLogRow_1 = new StringBuilder();
				log4jParamters_tLogRow_1.append("Parameters:");
				log4jParamters_tLogRow_1.append("BASIC_MODE" + " = " + "true");
				log4jParamters_tLogRow_1.append(" | ");
				log4jParamters_tLogRow_1
						.append("TABLE_PRINT" + " = " + "false");
				log4jParamters_tLogRow_1.append(" | ");
				log4jParamters_tLogRow_1.append("VERTICAL" + " = " + "false");
				log4jParamters_tLogRow_1.append(" | ");
				log4jParamters_tLogRow_1.append("FIELDSEPARATOR" + " = "
						+ "\"|\"");
				log4jParamters_tLogRow_1.append(" | ");
				log4jParamters_tLogRow_1.append("PRINT_HEADER" + " = "
						+ "false");
				log4jParamters_tLogRow_1.append(" | ");
				log4jParamters_tLogRow_1.append("PRINT_UNIQUE_NAME" + " = "
						+ "false");
				log4jParamters_tLogRow_1.append(" | ");
				log4jParamters_tLogRow_1.append("PRINT_COLNAMES" + " = "
						+ "false");
				log4jParamters_tLogRow_1.append(" | ");
				log4jParamters_tLogRow_1.append("USE_FIXED_LENGTH" + " = "
						+ "false");
				log4jParamters_tLogRow_1.append(" | ");
				log4jParamters_tLogRow_1.append("PRINT_CONTENT_WITH_LOG4J"
						+ " = " + "true");
				log4jParamters_tLogRow_1.append(" | ");
				if (log.isDebugEnabled())
					log.debug("tLogRow_1 - " + log4jParamters_tLogRow_1);

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMSSqlInput_1 begin ] start
				 */

				ok_Hash.put("tMSSqlInput_1", false);
				start_Hash.put("tMSSqlInput_1", System.currentTimeMillis());

				currentComponent = "tMSSqlInput_1";

				int tos_count_tMSSqlInput_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tMSSqlInput_1 - " + "Start to work.");
				StringBuilder log4jParamters_tMSSqlInput_1 = new StringBuilder();
				log4jParamters_tMSSqlInput_1.append("Parameters:");
				log4jParamters_tMSSqlInput_1.append("USE_EXISTING_CONNECTION"
						+ " = " + "false");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("HOST" + " = "
						+ "\"devdb4\"");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1
						.append("PORT" + " = " + "\"1433\"");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("DB_SCHEMA" + " = "
						+ "\"dbo\"");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("DBNAME" + " = "
						+ "\"ngsdw\"");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("USER" + " = "
						+ "\"etlprocess\"");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("PASS"
						+ " = "
						+ String.valueOf("ce36646cd05a3d2ab533f79cbfad2331")
								.substring(0, 4) + "...");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("TABLE" + " = " + "\"\"");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("QUERYSTORE" + " = "
						+ "\"\"");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("QUERY" + " = "
						+ "\"select top 1 datekey from dbo.datedim\"");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("SPECIFY_DATASOURCE_ALIAS"
						+ " = " + "false");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("PROPERTIES" + " = "
						+ "\"noDatetimeStringSync=true\"");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("TRIM_ALL_COLUMN" + " = "
						+ "false");
				log4jParamters_tMSSqlInput_1.append(" | ");
				log4jParamters_tMSSqlInput_1.append("TRIM_COLUMN" + " = "
						+ "[{TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("DateKey") + "}, {TRIM=" + ("false")
						+ ", SCHEMA_COLUMN=" + ("DayDate") + "}, {TRIM="
						+ ("false") + ", SCHEMA_COLUMN=" + ("DateDescription")
						+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("DateUSA") + "}, {TRIM=" + ("false")
						+ ", SCHEMA_COLUMN=" + ("DayOfWeek") + "}, {TRIM="
						+ ("false") + ", SCHEMA_COLUMN=" + ("MonthName")
						+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("DayNumInWeek") + "}, {TRIM=" + ("false")
						+ ", SCHEMA_COLUMN=" + ("DayNumInMonth") + "}, {TRIM="
						+ ("false") + ", SCHEMA_COLUMN=" + ("DayNumInYear")
						+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("MonthNumInYear") + "}, {TRIM=" + ("false")
						+ ", SCHEMA_COLUMN=" + ("WeekNumInYear") + "}, {TRIM="
						+ ("false") + ", SCHEMA_COLUMN=" + ("CalYear")
						+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("CalYearMonth") + "}, {TRIM=" + ("false")
						+ ", SCHEMA_COLUMN=" + ("MonthBeginDate") + "}, {TRIM="
						+ ("false") + ", SCHEMA_COLUMN=" + ("WeekBeginDate")
						+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("WeekEndDate") + "}, {TRIM=" + ("false")
						+ ", SCHEMA_COLUMN=" + ("BusinessDayFlag")
						+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("FiscalWeek") + "}, {TRIM=" + ("false")
						+ ", SCHEMA_COLUMN=" + ("FiscalMonth") + "}, {TRIM="
						+ ("false") + ", SCHEMA_COLUMN=" + ("FiscalQuarter")
						+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("FiscalYear") + "}, {TRIM=" + ("false")
						+ ", SCHEMA_COLUMN=" + ("FirstDayInMonthFlag")
						+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("LastDayInMonthFlag") + "}, {TRIM=" + ("false")
						+ ", SCHEMA_COLUMN=" + ("FirstDayFiscalMonthFlag")
						+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("WeekSeqNum") + "}, {TRIM=" + ("false")
						+ ", SCHEMA_COLUMN=" + ("FiscalMonthName")
						+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("FiscalYearMonth") + "}, {TRIM=" + ("false")
						+ ", SCHEMA_COLUMN=" + ("PostalDayFlag") + "}, {TRIM="
						+ ("false") + ", SCHEMA_COLUMN=" + ("CalQuarter")
						+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
						+ ("CalWeek") + "}]");
				log4jParamters_tMSSqlInput_1.append(" | ");
				if (log.isDebugEnabled())
					log.debug("tMSSqlInput_1 - " + log4jParamters_tMSSqlInput_1);

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tMSSqlInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tMSSqlInput_1 = new String[] {
						"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tMSSqlInput_1,
						talendToDBArray_tMSSqlInput_1);
				int nb_line_tMSSqlInput_1 = 0;
				java.sql.Connection conn_tMSSqlInput_1 = null;
				String driverClass_tMSSqlInput_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class.forName(driverClass_tMSSqlInput_1);
				String dbUser_tMSSqlInput_1 = "etlprocess";

				final String decryptedPassword_tMSSqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ce36646cd05a3d2ab533f79cbfad2331");

				String dbPwd_tMSSqlInput_1 = decryptedPassword_tMSSqlInput_1;

				String port_tMSSqlInput_1 = "1433";
				String dbname_tMSSqlInput_1 = "ngsdw";
				String url_tMSSqlInput_1 = "jdbc:jtds:sqlserver://" + "devdb4";
				if (!"".equals(port_tMSSqlInput_1)) {
					url_tMSSqlInput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tMSSqlInput_1)) {
					url_tMSSqlInput_1 += "//" + "ngsdw";
				}
				url_tMSSqlInput_1 += ";appName=" + projectName + ";"
						+ "noDatetimeStringSync=true";
				String dbschema_tMSSqlInput_1 = "dbo";

				log.debug("tMSSqlInput_1 - Driver ClassName: "
						+ driverClass_tMSSqlInput_1 + ".");

				log.debug("tMSSqlInput_1 - Connection attempt to '"
						+ url_tMSSqlInput_1 + "' with the username '"
						+ dbUser_tMSSqlInput_1 + "'.");

				conn_tMSSqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMSSqlInput_1, dbUser_tMSSqlInput_1,
						dbPwd_tMSSqlInput_1);
				log.debug("tMSSqlInput_1 - Connection to '" + url_tMSSqlInput_1
						+ "' has succeeded.");

				java.sql.Statement stmt_tMSSqlInput_1 = conn_tMSSqlInput_1
						.createStatement();

				String dbquery_tMSSqlInput_1 = "select top 1 datekey from dbo.datedim";

				log.debug("tMSSqlInput_1 - Executing the query: '"
						+ dbquery_tMSSqlInput_1 + "'.");

				globalMap.put("tMSSqlInput_1_QUERY", dbquery_tMSSqlInput_1);

				java.sql.ResultSet rs_tMSSqlInput_1 = null;
				try {
					rs_tMSSqlInput_1 = stmt_tMSSqlInput_1
							.executeQuery(dbquery_tMSSqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMSSqlInput_1 = rs_tMSSqlInput_1
							.getMetaData();
					int colQtyInRs_tMSSqlInput_1 = rsmd_tMSSqlInput_1
							.getColumnCount();

					String tmpContent_tMSSqlInput_1 = null;

					log.debug("tMSSqlInput_1 - Retrieving records from the database.");

					while (rs_tMSSqlInput_1.next()) {
						nb_line_tMSSqlInput_1++;

						if (colQtyInRs_tMSSqlInput_1 < 1) {
							row1.DateKey = 0;
						} else {

							if (rs_tMSSqlInput_1.getObject(1) != null) {
								row1.DateKey = rs_tMSSqlInput_1.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 2) {
							row1.DayDate = null;
						} else {

							row1.DayDate = mssqlGTU_tMSSqlInput_1.getDate(
									rsmd_tMSSqlInput_1, rs_tMSSqlInput_1, 2);

						}
						if (colQtyInRs_tMSSqlInput_1 < 3) {
							row1.DateDescription = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(3);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(3)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.DateDescription = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.DateDescription = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.DateDescription = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 4) {
							row1.DateUSA = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(4);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(4)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.DateUSA = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.DateUSA = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.DateUSA = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 5) {
							row1.DayOfWeek = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(5);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(5)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.DayOfWeek = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.DayOfWeek = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.DayOfWeek = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 6) {
							row1.MonthName = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(6);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(6)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.MonthName = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.MonthName = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.MonthName = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 7) {
							row1.DayNumInWeek = 0;
						} else {

							if (rs_tMSSqlInput_1.getObject(7) != null) {
								row1.DayNumInWeek = rs_tMSSqlInput_1.getInt(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 8) {
							row1.DayNumInMonth = 0;
						} else {

							if (rs_tMSSqlInput_1.getObject(8) != null) {
								row1.DayNumInMonth = rs_tMSSqlInput_1.getInt(8);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 9) {
							row1.DayNumInYear = 0;
						} else {

							if (rs_tMSSqlInput_1.getObject(9) != null) {
								row1.DayNumInYear = rs_tMSSqlInput_1.getInt(9);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 10) {
							row1.MonthNumInYear = 0;
						} else {

							if (rs_tMSSqlInput_1.getObject(10) != null) {
								row1.MonthNumInYear = rs_tMSSqlInput_1
										.getInt(10);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 11) {
							row1.WeekNumInYear = 0;
						} else {

							if (rs_tMSSqlInput_1.getObject(11) != null) {
								row1.WeekNumInYear = rs_tMSSqlInput_1
										.getInt(11);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 12) {
							row1.CalYear = 0;
						} else {

							if (rs_tMSSqlInput_1.getObject(12) != null) {
								row1.CalYear = rs_tMSSqlInput_1.getInt(12);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 13) {
							row1.CalYearMonth = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(13);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(13)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CalYearMonth = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.CalYearMonth = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.CalYearMonth = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 14) {
							row1.MonthBeginDate = null;
						} else {

							row1.MonthBeginDate = mssqlGTU_tMSSqlInput_1
									.getDate(rsmd_tMSSqlInput_1,
											rs_tMSSqlInput_1, 14);

						}
						if (colQtyInRs_tMSSqlInput_1 < 15) {
							row1.WeekBeginDate = null;
						} else {

							row1.WeekBeginDate = mssqlGTU_tMSSqlInput_1
									.getDate(rsmd_tMSSqlInput_1,
											rs_tMSSqlInput_1, 15);

						}
						if (colQtyInRs_tMSSqlInput_1 < 16) {
							row1.WeekEndDate = null;
						} else {

							row1.WeekEndDate = mssqlGTU_tMSSqlInput_1.getDate(
									rsmd_tMSSqlInput_1, rs_tMSSqlInput_1, 16);

						}
						if (colQtyInRs_tMSSqlInput_1 < 17) {
							row1.BusinessDayFlag = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(17);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(17)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.BusinessDayFlag = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.BusinessDayFlag = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.BusinessDayFlag = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 18) {
							row1.FiscalWeek = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(18) != null) {
								row1.FiscalWeek = rs_tMSSqlInput_1.getInt(18);
							} else {
								row1.FiscalWeek = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 19) {
							row1.FiscalMonth = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(19) != null) {
								row1.FiscalMonth = rs_tMSSqlInput_1.getInt(19);
							} else {
								row1.FiscalMonth = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 20) {
							row1.FiscalQuarter = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(20) != null) {
								row1.FiscalQuarter = rs_tMSSqlInput_1
										.getInt(20);
							} else {
								row1.FiscalQuarter = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 21) {
							row1.FiscalYear = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(21) != null) {
								row1.FiscalYear = rs_tMSSqlInput_1.getInt(21);
							} else {
								row1.FiscalYear = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 22) {
							row1.FirstDayInMonthFlag = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(22);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(22)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.FirstDayInMonthFlag = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.FirstDayInMonthFlag = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.FirstDayInMonthFlag = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 23) {
							row1.LastDayInMonthFlag = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(23);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(23)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.LastDayInMonthFlag = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.LastDayInMonthFlag = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.LastDayInMonthFlag = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 24) {
							row1.FirstDayFiscalMonthFlag = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(24);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(24)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.FirstDayFiscalMonthFlag = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.FirstDayFiscalMonthFlag = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.FirstDayFiscalMonthFlag = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 25) {
							row1.WeekSeqNum = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(25) != null) {
								row1.WeekSeqNum = rs_tMSSqlInput_1.getInt(25);
							} else {
								row1.WeekSeqNum = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 26) {
							row1.FiscalMonthName = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(26);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(26)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.FiscalMonthName = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.FiscalMonthName = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.FiscalMonthName = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 27) {
							row1.FiscalYearMonth = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(27);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(27)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.FiscalYearMonth = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.FiscalYearMonth = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.FiscalYearMonth = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 28) {
							row1.PostalDayFlag = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(28);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(28)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.PostalDayFlag = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.PostalDayFlag = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.PostalDayFlag = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 29) {
							row1.CalQuarter = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(29);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(29)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CalQuarter = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.CalQuarter = tmpContent_tMSSqlInput_1;
								}
							} else {
								row1.CalQuarter = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 30) {
							row1.CalWeek = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(30) != null) {
								row1.CalWeek = rs_tMSSqlInput_1.getShort(30);
							} else {
								row1.CalWeek = null;
							}
						}

						log.debug("tMSSqlInput_1 - Retrieving the record "
								+ nb_line_tMSSqlInput_1 + ".");

						/**
						 * [tMSSqlInput_1 begin ] stop
						 */

						/**
						 * [tMSSqlInput_1 main ] start
						 */

						currentComponent = "tMSSqlInput_1";

						tos_count_tMSSqlInput_1++;

						/**
						 * [tMSSqlInput_1 main ] stop
						 */

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						if (log.isTraceEnabled()) {
							log.trace("row1 - "
									+ (row1 == null ? "" : row1.toLogString()));
						}

						// /////////////////////

						strBuffer_tLogRow_1 = new StringBuilder();

						strBuffer_tLogRow_1
								.append(String.valueOf(row1.DateKey));

						strBuffer_tLogRow_1.append("|");

						if (row1.DayDate != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.DayDate));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.DateDescription != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.DateDescription));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.DateUSA != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.DateUSA));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.DayOfWeek != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.DayOfWeek));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.MonthName != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.MonthName));

						} //

						strBuffer_tLogRow_1.append("|");

						strBuffer_tLogRow_1.append(String
								.valueOf(row1.DayNumInWeek));

						strBuffer_tLogRow_1.append("|");

						strBuffer_tLogRow_1.append(String
								.valueOf(row1.DayNumInMonth));

						strBuffer_tLogRow_1.append("|");

						strBuffer_tLogRow_1.append(String
								.valueOf(row1.DayNumInYear));

						strBuffer_tLogRow_1.append("|");

						strBuffer_tLogRow_1.append(String
								.valueOf(row1.MonthNumInYear));

						strBuffer_tLogRow_1.append("|");

						strBuffer_tLogRow_1.append(String
								.valueOf(row1.WeekNumInYear));

						strBuffer_tLogRow_1.append("|");

						strBuffer_tLogRow_1
								.append(String.valueOf(row1.CalYear));

						strBuffer_tLogRow_1.append("|");

						if (row1.CalYearMonth != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.CalYearMonth));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.MonthBeginDate != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.MonthBeginDate));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.WeekBeginDate != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.WeekBeginDate));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.WeekEndDate != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.WeekEndDate));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.BusinessDayFlag != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.BusinessDayFlag));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.FiscalWeek != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.FiscalWeek));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.FiscalMonth != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.FiscalMonth));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.FiscalQuarter != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.FiscalQuarter));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.FiscalYear != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.FiscalYear));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.FirstDayInMonthFlag != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.FirstDayInMonthFlag));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.LastDayInMonthFlag != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.LastDayInMonthFlag));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.FirstDayFiscalMonthFlag != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.FirstDayFiscalMonthFlag));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.WeekSeqNum != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.WeekSeqNum));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.FiscalMonthName != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.FiscalMonthName));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.FiscalYearMonth != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.FiscalYearMonth));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.PostalDayFlag != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.PostalDayFlag));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.CalQuarter != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.CalQuarter));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.CalWeek != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.CalWeek));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_1 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_1);
						}
						log.info("tLogRow_1 - Content of row "
								+ (nb_line_tLogRow_1 + 1) + ": "
								+ strBuffer_tLogRow_1.toString());
						consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
								.toString());
						consoleOut_tLogRow_1.flush();
						nb_line_tLogRow_1++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

						/**
						 * [tMSSqlInput_1 end ] start
						 */

						currentComponent = "tMSSqlInput_1";

					}
				} finally {
					stmt_tMSSqlInput_1.close();

					if (conn_tMSSqlInput_1 != null
							&& !conn_tMSSqlInput_1.isClosed()) {

						log.debug("tMSSqlInput_1 - Closing the connection to the database.");

						conn_tMSSqlInput_1.close();

						log.debug("tMSSqlInput_1 - Connection to the database closed.");

					}
				}
				globalMap.put("tMSSqlInput_1_NB_LINE", nb_line_tMSSqlInput_1);
				log.debug("tMSSqlInput_1 - Retrieved records count: "
						+ nb_line_tMSSqlInput_1 + " .");

				if (log.isDebugEnabled())
					log.debug("tMSSqlInput_1 - " + "Done.");

				ok_Hash.put("tMSSqlInput_1", true);
				end_Hash.put("tMSSqlInput_1", System.currentTimeMillis());

				/**
				 * [tMSSqlInput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);
				if (log.isInfoEnabled())
					log.info("tLogRow_1 - " + "Printed row count: "
							+ nb_line_tLogRow_1 + ".");

				// /////////////////////

				if (log.isDebugEnabled())
					log.debug("tLogRow_1 - " + "Done.");

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage());
			}

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlInput_1 finally ] start
				 */

				currentComponent = "tMSSqlInput_1";

				/**
				 * [tMSSqlInput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final WorkProject WorkProjectClass = new WorkProject();

		int exitCode = WorkProjectClass.runJobInTOS(args);
		if (exitCode == 0) {
			log.info("TalendJob: 'WorkProject' - Done.");
		}

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (!"".equals(log4jLevel)) {
			if ("trace".equalsIgnoreCase(log4jLevel)) {
				log.setLevel(org.apache.log4j.Level.TRACE);
			} else if ("debug".equalsIgnoreCase(log4jLevel)) {
				log.setLevel(org.apache.log4j.Level.DEBUG);
			} else if ("info".equalsIgnoreCase(log4jLevel)) {
				log.setLevel(org.apache.log4j.Level.INFO);
			} else if ("warn".equalsIgnoreCase(log4jLevel)) {
				log.setLevel(org.apache.log4j.Level.WARN);
			} else if ("error".equalsIgnoreCase(log4jLevel)) {
				log.setLevel(org.apache.log4j.Level.ERROR);
			} else if ("fatal".equalsIgnoreCase(log4jLevel)) {
				log.setLevel(org.apache.log4j.Level.FATAL);
			} else if ("off".equalsIgnoreCase(log4jLevel)) {
				log.setLevel(org.apache.log4j.Level.OFF);
			}
			org.apache.log4j.Logger.getRootLogger().setLevel(log.getLevel());
		}
		log.info("TalendJob: 'WorkProject' - Start.");

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = WorkProject.class.getClassLoader()
					.getResourceAsStream(
							"work/workproject_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMSSqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMSSqlInput_1) {
			globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", -1);

			e_tMSSqlInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : WorkProject");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tMSSqlConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tMSSqlConnection_1",
				globalMap.get("conn_tMSSqlConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 89434 characters generated by Talend Big Data Platform on the February 20,
 * 2017 2:55:34 PM CST
 ************************************************************************************************/
